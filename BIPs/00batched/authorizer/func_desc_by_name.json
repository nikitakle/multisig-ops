{
  "setSwapFeePercentage(uint256)": "**Pools:** Authorize change of swap fees for pools that delegate ownership to Balancer Governance: 0xba1ba1...\n **Deployments**: Sets the protocol fee charged on swaps for this deployment.",
  "startAmplificationParameterUpdate(uint256,uint256)": "Start ramping up or down the A factor of a stableswap pool that delegated ownership to Balancer Governance: 0xba1ba1...",
  "stopAmplificationParameterUpdate()": "Stop A-factor change leaving the A-Factor at its currently set value on a stableswap pool that delegated ownership to Balancer Governance: 0xba1ba1...",
  "pause()": "Stops trading in a pool.  Proportinal withdraws are still possible.",
  "disable()": "Disables new creation of pools from a pool factory.",
  "enableRecoveryMode()": "Puts a pool into [Recovery Mode](https://medium.com/@0xSkly/inside-balancer-code-recoverymode-9af34ce5ab72).",
  "setTargets(uint256,uint256)": "Allows setting the targets of the linear pools. Targets determine the ideal amount of unwrapped tokens.",
  "exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))": "Allow a relayer to remove liquidity from a pool on the user's behalf.  [Relayer permissions notes](https://github.com/BalancerMaxis/multisig-ops/blob/staging/docs/Authorizer/vault_permissions.md).",
  "joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))": "Allow a relayer to add liquidity to a pool on the user's behalf.   [Relayer permissions notes](https://github.com/BalancerMaxis/multisig-ops/blob/staging/docs/Authorizer/vault_permissions.md).",
  "batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": "Allow a relayer to make a multihop trade or source liquidity from multiple pools on a users behalf.  [Relayer permissions notes](https://github.com/BalancerMaxis/multisig-ops/blob/staging/docs/Authorizer/vault_permissions.md).",
  "manageUserBalance((uint8,address,uint256,address,address)[])": "Utilize existing Vault allowances and internal balances so that a user does not have to re-approve the new relayer for each token. [Relayer permissions notes](https://github.com/BalancerMaxis/multisig-ops/blob/staging/docs/Authorizer/vault_permissions.md).",
  "setRelayerApproval(address,address,bool)": "Approve the relayer on the user's behalf (user must still provide a signed message). [Relayer permissions notes](https://github.com/BalancerMaxis/multisig-ops/blob/staging/docs/Authorizer/vault_permissions.md).",
  "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": "Allow a relayer to trade within a single pool on the user's behalf. [Relayer permissions notes](https://github.com/BalancerMaxis/multisig-ops/blob/staging/docs/Authorizer/vault_permissions.md).",
  "withdrawCollectedFees(address[],uint256[],address)": "Allows the withdrawal of collected protocol fees.",
  "setFlashLoanFeePercentage(uint256)": "Sets the protocol fee charged on flash loans for this deployment.",
  "setPaused(bool)": "Stops all trading activity involving the vault.",
  "notify_reward_amount(address)": "Begins a seven day distribution of token rewards.",
  "setFeeTypePercentage(uint256,uint256)": "Sets the protocol fee for a particular fee type for this deployment.",
  "addTokenToGauge(address,address,address)": "Whitelists a new token to be used as a reward token for a particular gauge.",
  "denylistToken(address)": "Adds a token to the ProtocolFeeWithdrawer deny list which prevents the withdrawal of that token from the ProtocolFeeCollector.",
  "addPoolFactory(address)": "Adds a Pool Factory and all pools it created to the [poolRecoveryHelper](https://forum.balancer.fi/t/bip-121-permission-granting-recovery-mode/4045#grant-the-following-roles-to-the-balancer-labs-ops-multisigs-on-each-network-5) for monitoring.",
  "removePoolFactory(address)": "Removes a Pool Factory and all pools it created to the [poolRecoveryHelper](https://forum.balancer.fi/t/bip-121-permission-granting-recovery-mode/4045#grant-the-following-roles-to-the-balancer-labs-ops-multisigs-on-each-network-5) for monitoring.",
  "checkpoint()": "Chckpoints are used by blabs to manage token flows to cross-chain gauges.",
  "setDelegation(address)": "Defines the address for the contract that manages the logic pertaining to boost delegation.",
  "denylistAddress(address)": "Removes the ability for a smart contract to lock or re-lock veBAL.",
  "addEthereumGauge(address)": "Adds a gauge to veBAL so it can be voted on to receive BAL emissions.",
  "addArbitrumGauge(address)": "Adds a gauge to veBAL so it can be voted on to receive BAL emissions.",
  "setTokenRateCacheDuration(address,uint256)": "Manage price caching on linear pools. See [here](https://forum.balancer.fi/t/proposal-boosted-pools-authorize-gauntlet-and-the-ballers-multisig-to-manage-pool-parameters/2400) for more details on configurable settings for linear pools. ",
  "addPolygonGauge(address)": "Adds a gauge to veBAL so it can be voted on to receive BAL emissions.",
  "setOptimismGasLimit(uint32)": "",
  "allowlistAddress(address)": "Grants a smart contract the ability to lock veBAL.  This capability is normally allowed only for EOA addresses.",
  "addOptimismGauge(address)": "Adds a gauge to veBAL so it can be voted on to receive BAL emissions.",
  "unpause()": "Unpause a pool, allowing it to resume trading.",
  "killGauge()": "Stop BAL rewards from flowing to a gauge, regardless of vote weight directed to the gauge.",
  "activate()": "A one time command used in the [initial activation of veBAL](https://forum.balancer.fi/t/vebal-activation-proposal/2632).",
  "setArbitrumFees(uint64,uint64,uint64)": "",
  "add_gauge(address,int128)": "Add a gauge to veBAL, allowing it to be voted on to receive BAL emissions.",
  "mint(address,uint256)": "Mint BAL tokens up to the current max supply as defined by the [emissions schedule.](https://docs.balancer.fi/concepts/governance/bal-token.html#supply-inflation-schedule)"
}
